import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from PIL import Image
import cv2
import numpy as np
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
TEMPLATES = {
    'template1': 'lay_01.png',
    'template2': 'lay_02.png',
}

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
ALLOWED_FORMATS = {'image/jpeg', 'image/png', 'image/jpg'}

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
STATES = {
    'WAITING_PHOTO': 1,
    'WAITING_TEMPLATE': 2
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤–∞—Ç–∞—Ä–Ω—ã–π –±–æ—Ç!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø–æ–º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –Ω–µ—ë –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–ª–æ–∂–µ–Ω–∏—è.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    context.user_data.clear()
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    help_text = (
        "üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
        "4. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def create_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /create."""
    create_message = (
        "üé® –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä!\n\n"
        "üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG –∏–ª–∏ PNG\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: –Ω–µ –º–µ–Ω–µ–µ 500x500 –ø–∏–∫—Å–µ–ª–µ–π\n"
        "‚Ä¢ –§–æ—Ç–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\n\n"
        "‚ú® –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è:\n"
        "1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª)\n"
        "2Ô∏è‚É£ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ! üì∏"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    context.user_data['state'] = STATES['WAITING_PHOTO']
    await update.message.reply_text(create_message)

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info."""
    info_message = (
        "‚ÑπÔ∏è –û –±–æ—Ç–µ:\n\n"
        "ü§ñ –ë–æ—Ç –§–æ—Ç–æ –ù–∞–ª–æ–∂–µ–Ω–∏–π - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–ª—å–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤!\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚ú® –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤\n"
        "üé≠ –†–∞–∑–ª–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞–ª–æ–∂–µ–Ω–∏–π\n"
        "üñº –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "‚ö°Ô∏è –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @nplxdesign\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create"
    )
    await update.message.reply_text(info_message)

def create_template_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —à–∞–±–ª–æ–Ω–æ–≤."""
    keyboard = [
        [InlineKeyboardButton(f"–®–∞–±–ª–æ–Ω {i+1}", callback_data=f"template{i+1}")]
        for i in range(len(TEMPLATES))
    ]
    return InlineKeyboardMarkup(keyboard)

async def crop_to_square(photo_bytes: bytes) -> bytes:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ñ–æ—Ç–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞."""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ numpy array
    nparr = np.frombuffer(photo_bytes, np.uint8)
    img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    
    if img is None:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    height, width = img.shape[:2]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞
    size = min(height, width)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
    start_x = (width - size) // 2
    start_y = (height - size) // 2
    
    # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    cropped = img[start_y:start_y+size, start_x:start_x+size]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ bytes
    is_success, buffer = cv2.imencode(".png", cropped)
    if not is_success:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    return buffer.tobytes()

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    if context.user_data.get('state') != STATES['WAITING_PHOTO']:
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create"
        )
        return

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if update.message.document:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if update.message.document.mime_type not in ALLOWED_FORMATS:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG, "
                    "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º Telegram."
                )
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            photo_file = await update.message.document.get_file()
        elif update.message.photo:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–æ—Ç–æ, –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            photo = update.message.photo[-1]
            photo_file = await photo.get_file()
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
            )
            return
        
        await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ —Ñ–æ—Ç–æ...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_bytes = await photo_file.download_as_bytearray()
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ñ–æ—Ç–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
            cropped_bytes = await crop_to_square(photo_bytes)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['photo_bytes'] = cropped_bytes
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ", callback_data="accept_crop"),
                    InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ", callback_data="reject_crop")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
            await update.message.reply_photo(
                photo=cropped_bytes,
                caption="üñº –í–æ—Ç –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1:1\n"
                        "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ?",
                reply_markup=reply_markup
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['state'] = STATES['WAITING_TEMPLATE']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑."
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "accept_crop":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        await query.edit_message_caption(
            caption="üé≠ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è:",
            reply_markup=create_template_keyboard()
        )
    elif query.data == "reject_crop":
        # –ü—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        context.user_data['state'] = STATES['WAITING_PHOTO']
        await query.edit_message_caption(
            caption="üì∏ –•–æ—Ä–æ—à–æ, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ!"
        )
    elif query.data.startswith("template"):
        await handle_template_selection(update, context)

async def handle_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞."""
    query = update.callback_query
    
    template_name = query.data
    if template_name not in TEMPLATES:
        await query.edit_message_caption(
            caption="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
    photo_bytes = context.user_data.get('photo_bytes')
    if not photo_bytes:
        await query.edit_message_caption(
            caption="‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /create"
        )
        return
    
    await query.edit_message_caption(
        caption="‚è≥ –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!"
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    template_path = TEMPLATES[template_name]
    try:
        result_bytes = await apply_template(photo_bytes, template_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=result_bytes,
            caption="‚ú® –í–∞—à –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤! üé®\n\n"
                    "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ.\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /create"
        )

async def apply_template(photo_bytes: bytes, template_path: str) -> bytes:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫ —Ñ–æ—Ç–æ."""
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with Image.open(io.BytesIO(photo_bytes)) as user_photo:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGBA –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if user_photo.mode != 'RGBA':
            user_photo = user_photo.convert('RGBA')
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ä–æ–º —Ñ–æ—Ç–æ
        with Image.open(template_path) as template:
            template = template.convert('RGBA')
            template = template.resize(user_photo.size, Image.Resampling.LANCZOS)
            
            # –ö–æ–º–ø–æ–Ω—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result = Image.alpha_composite(user_photo, template)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–π—Ç—ã
            output = io.BytesIO()
            result.save(output, format='PNG')
            output.seek(0)
            return output.getvalue()

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("create", create_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_photo))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
